#!/usr/bin/env python

'''
Datascope output to JSON run via cron every 5 mins

@package  Datascope
@author   Rob Newman <robertlnewman@gmail.com> 858.822.1333
@license  MIT style license
'''

import sys
import os
import gzip
import json
import string
import tempfile
from time import time, gmtime, strftime

# Load datascope functions
sys.path.append( os.environ['ANTELOPE'] + '/local/data/python/antelope' )
import datascope
import orb
from stock import pfupdate, pfget, epoch2str
from optparse import OptionParser

# Get command line arguments
usage = "Usage: %prog [options]"
parser = OptionParser(usage=usage)
parser.add_option("-v", action="store_true", dest="verbose", help="verbose output", default=False)
parser.add_option("-t", "--type", action="store", type="string", dest="subtype", help="type of file to create - summary or complete", default=False)
parser.add_option("-z", action="store_true", dest="orbzip", help="optionally gzip the output", default=False)
(options, args) = parser.parse_args()
if options.verbose:
    verbose = True
else:
    verbose = False
if options.subtype:
    subtype = options.subtype
else:
    subtype = False
if options.orbzip:
    orbzip = options.orbzip
else:
    orbzip = False

def zip_me_up(myfile):
    """Create a gzip version
    of the JSON content
    """
    fzip_in = open(myfile, 'rb')
    try:
        fzip_out = gzip.open('%s.gz' % myfile, 'wb' )
    except IOError,e:
        print "Error: %s:%s" % (IOError, e)
    else:
        fzip_out.writelines(fzip_in)
        fzip_out.close()
        fzip_in.close()
        return True

def orbstat_alert_level(secs, alerts=False):
    """Determine the alert level
    """
    if secs >= int(alerts['offline']):
        return 'down', 0
    elif secs >= int(alerts['warning']):
        return 'warning', 1
    else:
        return 'ok', 1

def humanize_time(secs):
    """Create human readable
    timestamp
    """
    secs = round(secs)
    if secs < 60:
        return '%02ds' % (secs)
    else:
        mins,secs = divmod(secs,60)
        if mins < 60:
            return '%02dm:%02ds' % (mins, secs)
        else:
            hours,mins = divmod(mins,60)
            return '%02dh:%02dm:%02ds' % (hours, mins, secs)

def add_orbstat(orbstat, sta, qtype=False):
    """Return station specific 
    orbstat values
    """
    orbstat_dict = {}
    if sta in orbstat:
        orbstat_dict['latency'] = orbstat[sta]['latency']
        orbstat_dict['latency_readable'] = humanize_time(orbstat[sta]['latency'])
        orbstat_dict['alert'] = orbstat[sta]['alert']
        orbstat_dict['status'] = orbstat[sta]['offon']
        if qtype == 'detail':
            orbstat_dict['slatest_time'] = orbstat[sta]['slatest_time']
            orbstat_dict['soldest_time'] = orbstat[sta]['soldest_time']
    else:
        orbstat_dict['latency'] = -1
        orbstat_dict['alert'] = 'down'
        orbstat_dict['status'] = 0
    return orbstat_dict

def parse_orb_sources(sources, alerts=False):
    """Parse the sources
    and return a dictionary
    """
    source_dict = {}
    for s in sources:
        srcname = s['srcname']
        parts = srcname.split('/')
        snet_sta = parts[0].split('_')
        snet = snet_sta[0]
        sta = snet_sta[1]
        latency = time() - s['slatest_time']
        alert, off_on = orbstat_alert_level(latency, alerts)
        source_dict[sta] = {}
        source_dict[sta]['latency'] = latency
        source_dict['latency_readable'] = humanize_time(latency)
        source_dict[sta]['snet'] = snet
        source_dict[sta]['alert'] = alert
        source_dict[sta]['offon'] = off_on
        source_dict[sta]['soldest_time'] = epoch2str(s['soldest_time'], "%Y-%m-%d %H:%M:%S")
        source_dict[sta]['slatest_time'] = epoch2str(s['slatest_time'], "%Y-%m-%d %H:%M:%S")
    return source_dict
 
def orb_interaction(orbptr, selection_string=False, alerts=False):
    """Open & select orb
    """
    if verbose:
        print " - Orb (%s) operations" % orbptr
    try:
        myorb = orb.Orb(orbptr, 'r')
    except Exception, e:
        print "  - Cannot open the orb %s. Caught exception: (%s)" % (orbptr, e)
        return False
    else:
        if myorb.select(selection_string) < 1:
            print "  - Problem with the orb select functionality!"
        else:
            if verbose:
                print "  - Number of sources selected: %d" % myorb.select(selection_string)
            when, sources = myorb.sources()
            orb_dict = parse_orb_sources(sources, alerts)
        myorb.close()
    return orb_dict
 
def main():
    """Main processing script
    for the JSON file
    """
    print "Start of script at time %s" % strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
    common_pf = 'common.pf'
    pfupdate(common_pf)
    dbmaster = pfget(common_pf, 'USARRAY_DBMASTER')
    cache_json = pfget(common_pf, 'CACHEJSON')
    json_path = '%s/stations' % cache_json
    if not subtype or subtype != 'summary':
        output_file_path = '%s/orbstat.json' % json_path
    else:
        output_file_path = '%s/orbstat_summary.json' % json_path
    usarray_orb = pfget(common_pf, 'USARRAY_ORB')
    usarray_orb_stations_select = pfget(common_pf, 'USARRAY_ORB_STATIONS_SELECT')
    orbstat_alerts = pfget(common_pf, 'ORBSTAT_ALERTS')
    warning_time = orbstat_alerts['warning']
    offline_time = orbstat_alerts['offline']
    if verbose:
        print "- Opening up orb"
    orb_dict = {}
    orbstatus = orb_interaction(usarray_orb, usarray_orb_stations_select, orbstat_alerts)
    if verbose:
        print "- Opening up database and table pointers"
    try:
        db = datascope.dbopen(dbmaster, 'r')
        db.lookup('', 'site', '', '')
    except Exception, e:
        print "  - Cannot open database %s. Caught exception %s: (%s)" % (dbmaster, Exception, e)
        exit()
    else:
        if verbose:
            print " - Create active stations dictionary key"
        db.join('snetsta')
        db.join('deployment')
        db.subset('offdate == NULL || offdate >= now()')
        db.subset('endtime >= now()')
        db.subset('time <= now()')

        mydb_snet = datascope.dbsort(db, 'snet', unique=True)
        for i in range(mydb_snet.query('dbRECORD_COUNT')):
            mydb_snet[3] = i
            snet = mydb_snet.getv('snet')[0]
            orb_dict[snet] = { 'total':0, 'online':0 }

        if not subtype or subtype != 'summary':
            orb_dict['active_stations'] = {}

        mydb_active = datascope.dbsort(db, 'sta', unique=True)
        for i in range(mydb_active.query('dbRECORD_COUNT')):
            mydb_active[3] = i
            sta, snet = mydb_active.getv('sta', 'snet')
            orb_dict[snet]['total'] += 1
            if not subtype or subtype != 'summary':
                orb_dict['active_stations'][sta] = add_orbstat(orbstatus, sta)
            if sta in orbstatus:
                if orbstatus[sta]['offon'] == 1:
                    orb_dict[snet]['online'] += 1
            else:
                orb_dict[snet]['online'] += 1
        cache_file_path = '%s+' % output_file_path
        if verbose:
            print "- Save JSON file %s" % output_file_path
        f = open(cache_file_path, 'w') 
        json.dump(orb_dict, f, sort_keys=True, indent=2)
        f.flush()
        try:
            os.rename(cache_file_path, output_file_path)
        except OSError:
            print "  - Cannot rename JSON file. Permissions problem?"
        if orbzip:
            if verbose:
                print "- Create gzip file: %s.gz" % output_file_path
            zip_me_up(output_file_path)

        print "End of script at time %s" % strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())

if __name__ == '__main__':
    main()
